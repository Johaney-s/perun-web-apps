{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nrwl/nx"],
  "overrides": [
    {
      "files": ["*.ts"],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@angular-eslint/recommended"
      ],
      "rules": {
        // Eslint rules
        "no-shadow": "off",
        "no-unused-expressions": "off",
        "no-restricted-imports": ["error", "rxjs/Rx"],
        "eqeqeq": ["error", "smart"],
        "no-console": "error",
        "no-throw-literal": "error",

        // Typescript rules
        "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/explicit-function-return-type": "error", // Perhaps too strict
        "@typescript-eslint/explicit-member-accessibility": ["error", { "accessibility": "no-public" }],
        "@typescript-eslint/member-ordering": "error", // Can be configured, so we don't need to make so many changes, but still have consistency
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-optional-chain": "error", // Can have false positives so maybe remove this rule
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/no-shadow": ["error"],
        "@typescript-eslint/no-unused-expressions": "error",
        // Override rules from extensions to treat everything as error
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/explicit-module-boundary-types": "error",
        // Disable formatting rules as formatting is handled by Prettier
        "@typescript-eslint/no-extra-semi": "off",
        // Naming conventions - variables, selectors
        "@typescript-eslint/naming-convention": ["error", {"selector": "variable", "format": ["camelCase", "UPPER_CASE", "PascalCase"]}],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "perun-web-apps",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "perunWebApps",
            "style": "camelCase"
          }
        ],

        // Angular rules
        // Override rules from extensions to treat everything as error
        "@angular-eslint/use-lifecycle-interface": "error",

        // Nx rules
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ],
            "enforceBuildableLibDependency": true
          }
        ]
      },
      "plugins": [
        "eslint-plugin-import",
        "@angular-eslint/eslint-plugin",
        "@typescript-eslint"
      ]
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@nrwl/nx/angular-template"],
      "rules": {
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/eqeqeq": "error",
        "@angular-eslint/template/no-negated-async": "error"
      },
      "plugins": ["@angular-eslint/eslint-plugin-template"]
    }
  ]
}
