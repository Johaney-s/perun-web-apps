@use '@angular/material' as mat;
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming

// IMPORTANT
// Changes to the styles should be made in the _styles.scss file.
// Changes to the styles.scss would result in the styles being overwritten
// during the build process and the changes would be lost.

@function mat-color-from-palette($palette, $hue: default, $opacity: null) {
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return mat-color-from-palette($palette, default, $hue);
  }

  $color: map-get($palette, $hue);

  @if (type-of($color) != color) {
    @if ($opacity == null) {
      @return $color;
    }

    // Here is the change from the original function:
    // If the $color resolved to something different from a color, we assume it is a CSS variable
    // in the form of rgba(var(--rgba-css-var),a) and replace the 'a' value.
    @return #{str-slice($color, 0, str-index($color, ',')) + $opacity + ')'};
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}

// Plus imports for other components in your app.

// Include the common styles for Angular Material.
@include mat.all-component-typographies();
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$perun-primary: mat.define-palette(mat.$gray-palette, 900);
$perun-accent: mat.define-palette(mat.$green-palette, 600);

// The warn palette is optional (defaults to red).
$perun-warn: mat.define-palette(mat.$red-palette);

// Create the theme object (a Sass map containing all of the palettes).
$perun-theme: mat.define-light-theme(
  (
    color: (
      primary: $perun-primary,
      accent: $perun-accent,
      warn: $perun-warn,
    ),
    typography: mat.define-typography-config(),
    density: 0,
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($perun-theme);

.user-theme {
  $user-dynamic-colors: (
    50: rgba(var(--user-theme-primary-50), 1),
    100: rgba(var(--user-theme-primary-100), 1),
    200: rgba(var(--user-theme-primary-200), 1),
    300: rgba(var(--user-theme-primary-300), 1),
    400: rgba(var(--user-theme-primary-400), 1),
    500: rgba(var(--user-theme-primary-500), 1),
    600: rgba(var(--user-theme-primary-600), 1),
    700: rgba(var(--user-theme-primary-700), 1),
    800: rgba(var(--user-theme-primary-800), 1),
    900: rgba(var(--user-theme-primary-900), 1),
    A100: rgba(var(--user-theme-primary-A100), 1),
    A200: rgba(var(--user-theme-primary-A200), 1),
    A400: rgba(var(--user-theme-primary-A400), 1),
    A700: rgba(var(--user-theme-primary-A700), 1),
    contrast: (
      50: rgba(var(--user-theme-primary-contrast-50), 1),
      100: rgba(var(--user-theme-primary-contrast-100), 1),
      200: rgba(var(--user-theme-primary-contrast-200), 1),
      300: rgba(var(--user-theme-primary-contrast-300), 1),
      400: rgba(var(--user-theme-primary-contrast-400), 1),
      500: rgba(var(--user-theme-primary-contrast-500), 1),
      600: rgba(var(--user-theme-primary-contrast-600), 1),
      700: rgba(var(--user-theme-primary-contrast-700), 1),
      800: rgba(var(--user-theme-primary-contrast-800), 1),
      900: rgba(var(--user-theme-primary-contrast-900), 1),
      A100: rgba(var(--user-theme-primary-contrast-A100), 1),
      A200: rgba(var(--user-theme-primary-contrast-A200), 1),
      A400: rgba(var(--user-theme-primary-contrast-A400), 1),
      A700: rgba(var(--user-theme-primary-contrast-A700), 1),
    ),
  );

  $user-primary: mat.define-palette($user-dynamic-colors, 500);
  $user-accent: mat.define-palette(mat.$green-palette, 600);

  $user-theme: mat.define-light-theme(
    (
      color: (
        primary: $user-primary,
        accent: $user-accent,
      ),
    )
  );

  @include mat.all-component-colors($user-theme);
}

button {
  border-radius: 0 !important;
}

button:focus {
  outline: none !important;
}

th,
td.mat-mdc-cell {
  padding: 0.25rem !important;
}

.page-subtitle {
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.dark-hover-list-item {
  &:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
}

.title-icon {
  font-size: 32px;
}

.dialog-container {
  display: flex;
  flex-direction: column;
}

.dialog-container > * {
  width: 100%;
}

.loading {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.book {
  --color: #000;
  --duration: 6.8s;
  width: 32px;
  height: 12px;
  position: relative;
  margin: 32px 0 0 0;
  //Demo
  zoom: 1.5;
  .inner {
    width: 32px;
    height: 12px;
    position: relative;
    transform-origin: 2px 2px;
    animation: book var(--duration) ease infinite;
    .left,
    .right {
      width: 60px;
      height: 4px;
      top: 0;
      border-radius: 2px;
      background: var(--color);
      position: absolute;
      &:before {
        content: '';
        width: 48px;
        height: 4px;
        border-radius: 2px;
        background: inherit;
        position: absolute;
        top: -10px;
        left: 6px;
      }
    }
    .left {
      right: 28px;
      transform-origin: 58px 2px;
      animation: left var(--duration) ease infinite;
    }
    .right {
      left: 28px;
      transform-origin: 2px 2px;
      animation: right var(--duration) ease infinite;
    }
    .middle {
      width: 32px;
      height: 12px;
      border: 4px solid var(--color);
      border-top: 0;
      border-radius: 0 0 9px 9px;
      transform: translateY(2px);
    }
  }
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
    position: absolute;
    left: 50%;
    top: 0;
    li {
      height: 4px;
      border-radius: 2px;
      transform-origin: 100% 2px;
      width: 48px;
      right: 0;
      top: -10px;
      position: absolute;
      background: var(--color);
      transform: rotateZ(0deg) translateX(-18px);
      animation-duration: var(--duration);
      animation-timing-function: ease;
      animation-iteration-count: infinite;
      $i: 0;
      @while $i < 19 {
        &:nth-child(#{$i}) {
          animation-name: page-#{$i};
        }
        $i: $i + 1;
      }
    }
  }
}

$i: 0;
@while $i < 19 {
  $delay: $i * 1.86;
  $delay-after: $i * 1.74;
  @keyframes page-#{$i} {
    #{(4% + ($delay))} {
      transform: rotateZ(0deg) translateX(-18px);
    }
    #{(13% + ($delay-after))},
    #{(54% + ($delay))} {
      transform: rotateZ(180deg) translateX(-18px);
    }
    #{(63% + ($delay-after))} {
      transform: rotateZ(0deg) translateX(-18px);
    }
  }
  $i: $i + 1;
}

@keyframes left {
  4% {
    transform: rotateZ(0deg);
  }
  10%,
  40% {
    transform: rotateZ(0deg);
  }
  46%,
  54% {
    transform: rotateZ(90deg);
  }
  60%,
  90% {
    transform: rotateZ(0deg);
  }
  96% {
    transform: rotateZ(90deg);
  }
}

@keyframes right {
  4% {
    transform: rotateZ(0deg);
  }
  10%,
  40% {
    transform: rotateZ(0deg);
  }
  46%,
  54% {
    transform: rotateZ(-90deg);
  }
  60%,
  90% {
    transform: rotateZ(0deg);
  }
  96% {
    transform: rotateZ(-90deg);
  }
}

@keyframes book {
  4% {
    transform: rotateZ(0deg);
  }
  10%,
  40% {
    transform: rotateZ(0deg);
    transform-origin: 2px 2px;
  }
  40.01%,
  59.99% {
    transform-origin: 30px 2px;
  }
  46%,
  54% {
    transform: rotateZ(90deg);
  }
  60%,
  90% {
    transform: rotateZ(0deg);
    transform-origin: 2px 2px;
  }
  96% {
    transform: rotateZ(-90deg);
  }
}

.action-button::after {
  content: '\2026';
}

.perun-icon {
  path {
    fill: currentColor;
  }
  rect {
    fill: currentColor;
  }
  polygon {
    fill: currentColor;
  }
}

mat-icon {
  overflow: inherit !important;
}

.static-column-size {
  width: 80px;
}

.align-checkbox {
  text-align: center !important;
  vertical-align: middle !important;
}

.align-checkbox mat-checkbox {
  margin-top: 7px !important;
}

.mat-mdc-tooltip {
  font-size: 14px !important;
  word-wrap: break-word !important;
}

.spinner-container {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.15);
  z-index: 999;
  display: flex;
  align-items: center;
  justify-content: center;
}

/*************************************
******** Customization of MDC ********
*************************************/

// Custom MDC form field
.mdc-text-field {
  background-color: transparent !important;
  margin-top: 5px !important;
}
label:not(.mdc-floating-label--float-above) {
  padding-top: 16px !important;
  width: 100%;
}
.mat-form-field-appearance-outline {
  label:not(.mdc-floating-label--float-above) {
    padding-top: 0 !important;
  }
}
.mdc-floating-label--float-above {
  width: 133.33% !important;
}
mat-form-field mat-icon {
  padding: 0 !important;
}

// Proper mat icon inside button
.mat-mdc-outlined-button > .mat-icon,
.mat-mdc-unelevated-button > .mat-icon {
  margin-left: 0 !important;
  margin-right: 0 !important;
  height: 1.5rem !important;
  width: 1.5rem !important;
  font-size: 1.5rem !important;
}

// angular 15 button fixes

.mdc-button {
  border-radius: 0 !important;
  white-space: nowrap !important;
  letter-spacing: normal;
}

.mat-mdc-checkbox label,
.mat-mdc-radio-button label,
.mat-mdc-slide-toggle label {
  padding-top: 0 !important;
}

.mat-mdc-tab-header {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12) !important;
}

.mdc-data-table__cell {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12) !important;
}
